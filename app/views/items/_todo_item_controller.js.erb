(function () {
      'use strict';
      angular.module('Items').controller('TodoItemController', TodoItemController);
      TodoItemController.$inject = ['$http'];
      function TodoItemController($http) {
        var vm = this;
        vm.todo_items = <%= todo_items.to_json.html_safe %>;
        vm.uncompleted_todo_items = vm.todo_items.filter(function(item){
          return !item.completed;
        });
        vm.completed_todo_items = vm.todo_items.filter(function(item){
          return item.completed;
        });
        vm.item_lists = [vm.uncompleted_todo_items, vm.completed_todo_items];
        vm.new_todo_item = {};

        vm.updateTodo = updateTodo;
        vm.addTodo = addTodo;
        vm.deleteTodo = deleteTodo;
        vm.showScheduleView = showScheduleView;
        vm.hideScheduleView = hideScheduleView;
        vm.updateScheduleEnd = updateScheduleEnd;
        vm.scheduleTodo = scheduleTodo;
        vm.removeItemFromArray = removeItemFromArray;

        function updateTodo(todo){
          vm.is_loading = true;
          $http.put("todo_item/"+todo.id, {completed: todo.completed}).then(function(response){
              vm.is_loading = false;
          });
        }
        function addTodo(){
          var requestBody = {
              title: vm.new_todo_item.title,
              description: vm.new_todo_item.description,
              authenticity_token: '<%= form_authenticity_token %>'
            };
            vm.is_loading = true;
          $http.post("todo_item", requestBody).then(function(response){
              vm.uncompleted_todo_items.push(response.data);
              vm.new_todo_item = {};
              vm.is_loading = false;
            });
        }
        function deleteTodo(todo_to_delete){
          if(confirm("Delete: " + todo_to_delete.title + "?")){
            $http.delete("/todo_item/"+todo_to_delete.id).then(function(response){
              vm.removeItemFromArray(response.data.id, vm.uncompleted_todo_items);
              vm.removeItemFromArray(response.data.id, vm.completed_todo_items);
            });
          }
        }

        function showScheduleView(todo){
          todo.schedule_view_open = true;
        }
        function hideScheduleView(todo){
          todo.schedule_view_open = false;
        }

        function updateScheduleEnd(todo){
          if(!todo.schedule_end && todo.schedule_start){
            todo.schedule_end = todo.schedule_start;
          }
        }

        function removeItemFromArray(id, array){
          var matchingIndex = -1;
          for (var i = 0; i < array.length; i++) { 
              if(id === array[i].id){
                matchingIndex = i;
              }
          }
          if(matchingIndex !== -1){
            array.splice(matchingIndex, 1);
          }
        }

        function scheduleTodo(todo){
          if(todo.schedule_start && todo.schedule_end){
            //secret DpNP4KhvwjLstcP8i-OTfKB8
            var clientId = '976525523411-msu9ft0cmibf5ulf4r2rrfvqvj1iatsq.apps.googleusercontent.com';
            var apiKey = 'AIzaSyDjaMTmqnhVGQnkHisPYccnmIlVyyNJ68o';
            var scopes = 'https://www.googleapis.com/auth/calendar';
            gapi.client.setApiKey(apiKey);
            window.setTimeout(checkAuth,1);
            function checkAuth() {
              gapi.auth.authorize({client_id: clientId, scope: scopes, immediate: false},
                  handleAuthResult);
            }
            function handleAuthResult(authResult) {
              if (authResult) {
                addToCalendar(todo);
              }
            }

            function addToCalendar(todo) {
              gapi.client.load('calendar', 'v3', function() {
                var event = {
                  'summary': todo.title,
                  'location': 'My Place',
                  'description': 'todo.description',
                  'start': {
                    'dateTime': todo.schedule_start,
                  },
                  'end': {
                    'dateTime': todo.schedule_end,
                  },
                  'attendees': [
                    {'email': '<%= user.email %>'}
                  ],
                  'reminders': {
                    'useDefault': false
                  }
                };
                var request = gapi.client.calendar.events.insert({
                  'calendarId': 'primary',
                  'resource': event
                });
                request.execute(function(resp) {
                  if(resp.status === 'confirmed'){
                    alert("Todo Scheduled");
                  }
                  todo.schedule_view_open = false;
                });
              });
            }
          }
        }
      };
    })();